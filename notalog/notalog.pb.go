// Code generated by protoc-gen-go. DO NOT EDIT.
// source: notalog.proto

package notalog

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Tail                 bool     `protobuf:"varint,1,opt,name=tail,proto3" json:"tail,omitempty"`
	Old                  int32    `protobuf:"varint,2,opt,name=old,proto3" json:"old,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_2423a077f859529e, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetTail() bool {
	if m != nil {
		return m.Tail
	}
	return false
}

func (m *Request) GetOld() int32 {
	if m != nil {
		return m.Old
	}
	return 0
}

type Event struct {
	Time                 string   `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Source               string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Detail               string   `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_2423a077f859529e, []int{1}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *Event) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Event) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Event) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "notalog.Request")
	proto.RegisterType((*Event)(nil), "notalog.Event")
}

func init() { proto.RegisterFile("notalog.proto", fileDescriptor_2423a077f859529e) }

var fileDescriptor_2423a077f859529e = []byte{
	// 181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8f, 0x4d, 0xca, 0xc2, 0x30,
	0x10, 0x40, 0xc9, 0xd7, 0xff, 0x81, 0x4f, 0xca, 0x20, 0x52, 0x5c, 0x95, 0xae, 0xba, 0x90, 0x2a,
	0xba, 0xf1, 0x02, 0x5e, 0x20, 0x9e, 0x20, 0xda, 0x41, 0x0a, 0x69, 0xa3, 0x69, 0xea, 0xf9, 0xa5,
	0x93, 0xea, 0xee, 0xbd, 0xe1, 0x85, 0xcc, 0xc0, 0xff, 0x60, 0x9c, 0xd2, 0xe6, 0xd1, 0x3c, 0xad,
	0x71, 0x06, 0x93, 0x45, 0xab, 0x3d, 0x24, 0x92, 0x5e, 0x13, 0x8d, 0x0e, 0x11, 0x42, 0xa7, 0x3a,
	0x5d, 0x88, 0x52, 0xd4, 0xa9, 0x64, 0xc6, 0x1c, 0x02, 0xa3, 0xdb, 0xe2, 0xaf, 0x14, 0x75, 0x24,
	0x67, 0xac, 0x14, 0x44, 0x97, 0x37, 0x0d, 0x3e, 0xef, 0x7a, 0xe2, 0x3c, 0x93, 0xcc, 0xb8, 0x81,
	0x78, 0x34, 0x93, 0xbd, 0x13, 0xbf, 0xc8, 0xe4, 0x62, 0xb8, 0x86, 0xc8, 0x75, 0x4e, 0x53, 0x11,
	0xf0, 0xd8, 0xcb, 0x5c, 0xb7, 0xc4, 0x5f, 0x86, 0xbe, 0xf6, 0x76, 0x3c, 0x43, 0x7a, 0x75, 0x96,
	0x54, 0x4f, 0x16, 0x77, 0x10, 0x7b, 0xc6, 0xbc, 0xf9, 0x9e, 0xb0, 0x2c, 0xbc, 0x5d, 0xfd, 0x26,
	0xbc, 0xd1, 0x41, 0xdc, 0x62, 0xbe, 0xee, 0xf4, 0x09, 0x00, 0x00, 0xff, 0xff, 0x37, 0x2f, 0xd3,
	0xb5, 0xee, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamerClient is the client API for Streamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamerClient interface {
	Stream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Streamer_StreamClient, error)
}

type streamerClient struct {
	cc *grpc.ClientConn
}

func NewStreamerClient(cc *grpc.ClientConn) StreamerClient {
	return &streamerClient{cc}
}

func (c *streamerClient) Stream(ctx context.Context, in *Request, opts ...grpc.CallOption) (Streamer_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Streamer_serviceDesc.Streams[0], "/notalog.Streamer/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streamer_StreamClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type streamerStreamClient struct {
	grpc.ClientStream
}

func (x *streamerStreamClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamerServer is the server API for Streamer service.
type StreamerServer interface {
	Stream(*Request, Streamer_StreamServer) error
}

// UnimplementedStreamerServer can be embedded to have forward compatible implementations.
type UnimplementedStreamerServer struct {
}

func (*UnimplementedStreamerServer) Stream(req *Request, srv Streamer_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterStreamerServer(s *grpc.Server, srv StreamerServer) {
	s.RegisterService(&_Streamer_serviceDesc, srv)
}

func _Streamer_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamerServer).Stream(m, &streamerStreamServer{stream})
}

type Streamer_StreamServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type streamerStreamServer struct {
	grpc.ServerStream
}

func (x *streamerStreamServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _Streamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notalog.Streamer",
	HandlerType: (*StreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Streamer_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notalog.proto",
}
